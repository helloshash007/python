import time
import os
import logging
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import shutil

# Set up logging
logging.basicConfig(filename='monitoring_log.txt', level=logging.INFO, format='%(asctime)s - %(message)s')

# Create a list to keep track of processed files
processed_files = set()

class MyHandler(FileSystemEventHandler):
    def on_modified(self, event):
        if not event.is_directory:
            source_file = event.src_path

            # Check if the file has already been processed
            if source_file in processed_files:
                return

            # Backup the file to another location
            backup_dir = '/path/to/backup_directory'
            shutil.copy(source_file, backup_dir)

            # Extract the file name and extension
            filename, file_extension = os.path.splitext(os.path.basename(source_file))

            # Replace dots and spaces with underscores, and add .txt
            new_filename = filename.replace('.', '_').replace(' ', '_') + '.txt'

            # Construct the full paths for source and destination
            source_path = source_file
            destination_path = os.path.join('/path/to/directory_2', new_filename)

            try:
                # Use os.rename to move and rename the file
                os.rename(source_path, destination_path)

                # Log the file processing
                logging.info(f'Received, backed up, and moved: {new_filename}')

                # Add the processed file to the list
                processed_files.add(destination_path)
            except Exception as e:
                logging.error(f'Error while moving/rename: {e}')

    def on_deleted(self, event):
        if event.is_directory and not os.listdir(event.src_path):
            logging.info('Directory is empty')

if __name__ == "__main__":
    directory_to_watch = '/path/to/monitoring_directory'
    event_handler = MyHandler()
    observer = Observer()
    observer.schedule(event_handler, directory_to_watch, recursive=True)

    observer.start()

    while True:
        # Periodically check if the directory is empty
        time.sleep(600)  # Sleep for 10 minutes (600 seconds)

        if not os.listdir(directory_to_watch):
            logging.info('Directory is empty')

    try:
        while True:
            time.sleep(10)
    except KeyboardInterrupt:
        observer.stop()

    observer.join()

